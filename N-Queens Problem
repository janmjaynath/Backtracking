public class Backtracking {
    public static boolean isSafe(char board[][] , int row , int col){
        //vertical up
        for(int i=row-1; i>=0; i--){
            if(board[i][col]=='Q'){
                return false;
            }

        }

        //left diagonal
        for(int i = row-1,j=col-1; i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        //right diagonal
        for(int i=row-1 , j=col+1; i>=0 && j<board.length; i--,j++ ){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        return true;
            
    }
    public static void nQueens(char board[][], int row) {


        if(row == board.length) {
            print(board);
            return;
        }

         
        for(int j=0; j<board.length; j++) {
            if(isSafe(board, row, j)){
                board[row][j] = 'Q';
                nQueens(board, row+1);
                board[row][j] = '.'; // backtracking
            }
        }
    
    }

    public static void print(char board[][]) {
        System.out.println("-----Chess Board------");
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board[i].length; j++) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        
        }
        System.out.println();
    }

    
    public static void main(String[] args) {
        int n = 4;
        char board[][] = new char[n][n];
        //Initialize
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board.length; j++){
                board[i][j] = '.';

            }
        }
        nQueens(board, 0);
    }
}
